name: Windows Release

on:
  push:
    branches:
      - 'continuous-integration'
    tags:
      - 'v*'
  pull_request:
    branches:
    - 'continuous-integration'

defaults:
  run:
    shell: cmd

env:
  SOURCE_DIR:   ${{ github.workspace }}
  QT_VERSION:   6.5.1
  ARTIFACT:     machine_sim.zip

jobs:
  build:
    runs-on:  windows-2019

    steps:
      - name: (1) Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: (2) Get all tags for correct version determination
        working-directory:  ${{ github.workspace }}
        run: |
          git fetch --all --tags -f
      - name: (3) Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version:      ${{ env.QT_VERSION }}
          host:         windows
          target:       desktop
          arch:         win64_msvc2019_64
          dir:          ${{ runner.temp }}
          modules:      qtcharts qtwebsockets # mqtt printsupport
          cache:        true
          setup-python: false

      - name: (4) Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: (5) Clone and configure QTMQTT
        working-directory: ${{ runner.temp }}
        run: |
             git clone https://github.com/qt/qtmqtt.git
             cd qtmqtt
             git checkout v${{ env.QT_VERSION }}
             cmake.exe -B build -DCMAKE_GENERATOR=Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=\a\_temp\Qt\6.5.1\msvc2019_64 -DCMAKE_CXX_FLAGS_INIT=

      - name: (6) Build QTMQTT
        working-directory: ${{ runner.temp }}/qtmqtt
        run: |
             cmake --build build -j4
             dir build\bin
             cmake --install build

      # - name: (7) Download JOM
      #   uses: suisei-cn/actions-download-file@v1
      #   with:
      #     url:    http://download.qt.io/official_releases/jom/jom.zip
      #     target: ${{ runner.temp }}\

      # - name: (5) Unzip JOM
      #   working-directory: ${{ runner.temp }}
      #   run:  |
      #         7z x jom.zip -ojom
              
      - name: (7) Create build directory
        run:  mkdir ${{ env.SOURCE_DIR }}\build

      - name: (8) Configure and build
        working-directory: ${{ env.SOURCE_DIR }}
        run:  |
              cmake.exe -B build -DCMAKE_GENERATOR:STRING=Ninja -DCMAKE_BUILD_TYPE:STRING=Release "-DCMAKE_PREFIX_PATH:PATH=\a\_temp\Qt\6.5.1\msvc2019_64" "-DCMAKE_CXX_FLAGS_INIT:STRING="
              cmake --build build
              mkdir -p ${{ runner.temp }}\deploy\machine_sim
              cp build\machine_sim.exe ${{ runner.temp }}\deploy\machine_sim
              cd ${{ runner.temp }}\deploy\machine_sim
              windeployqt --qmldir ${{ env.SOURCE_DIR }} machine_sim.exe --pdb --release --compiler-runtime --no-translations
              copy C:\Windows\System32\concrt140.dll . 
              copy C:\Windows\System32\vccorlib140.dll .
              copy C:\Windows\System32\msvcp140.dll .
              copy C:\Windows\System32\vcruntime140.dll .
              
      # - name: (9) Zip build
      #   working-directory: ${{ runner.temp }}
      #   run:  |
      #         7z a machine_sim.zip machine_sim\* -r
              
      - name: (10) Save build artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ runner.temp }}\deploy\machine_sim
